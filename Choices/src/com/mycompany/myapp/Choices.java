package com.mycompany.myapp;

import com.codename1.ui.Button;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Component;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Label;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;

import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class Choices {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        this.theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }

    private static double getGPA() {
        double sum = 0;
        double gpa = 0;
        int count = 0;
        SimpleReader gpaIn = new SimpleReader1L("data/gpa.txt");
        while (!gpaIn.atEOS()) {
            sum += gpaIn.nextDouble();
            count++;
        }

        gpa = sum / count;

        return gpa;
    }

    public void start() {
        if (this.current != null) {
            this.current.show();
            return;
        }

        TableLayout t1;
        int spanButton = 2;
        Form hi = new Form();
        t1 = new TableLayout(9, 1);
        t1.setGrowHorizontally(true);
        hi.setLayout(t1);
        TextField firstName = new TextField("", "First Name", 20, TextArea.ANY);
        TextField stateName = new TextField("", "State", 20, TextArea.ANY);
        ComboBox<String> genCombo = new ComboBox<>();
        genCombo.addItem("Male");
        genCombo.addItem("Female");
        genCombo.addItem("Other");
        TextField raceName = new TextField("", "Race", 20, TextArea.ANY);
        Button submit = new Button("Submit");
        hi.add("First Name").add(firstName);
        hi.add("State").add(stateName);
        hi.add("Gender").add(genCombo);
        hi.add("Race").add(raceName);
        hi.add(submit);
        hi.show();

        TableLayout t2;
        int spanButton2 = 2;
        Form mainPage = new Form();
        t2 = new TableLayout(4, 1);
        t2.setGrowHorizontally(true);
        mainPage.setLayout(t2);
        Label title = new Label("Choices");

        title.setAlignment(Component.CENTER);
        Button contact = new Button("Contact");
        Button stats = new Button("Stats");
        Button settings = new Button("Settings");
        mainPage.add(title);
        mainPage.add(contact);
        mainPage.add(stats);
        mainPage.add(settings);

        TableLayout t3;
        int spanButton3 = 3;
        Form statsPage = new Form();
        t3 = new TableLayout(1, 1);
        t3.setGrowHorizontally(true);
        statsPage.setLayout(t3);
        Label statsTitle = new Label("Stats");
        statsTitle.setAlignment(Component.CENTER);
        Button back = new Button("Back");
        Label statsLabel = new Label("Default");
        Label statsGPA = new Label("Default");
        statsLabel.setAlignment(Component.CENTER);
        statsPage.add(statsLabel);
        statsPage.add("GPA").add(statsGPA);
        statsPage.add(back);
        submit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent submitPressed) {

                String name = firstName.getText();
                String gender = genCombo.getSelectedItem();
                String state = stateName.getText();
                String race = raceName.getText();

                SimpleWriter nameOut = new SimpleWriter1L("data/name.txt");
                SimpleWriter stateOut = new SimpleWriter1L("data/state.txt");
                SimpleWriter genderOut = new SimpleWriter1L("data/gender.txt");
                SimpleWriter raceOut = new SimpleWriter1L("data/race.txt");

                nameOut.println(name);
                stateOut.println(state);
                genderOut.println(gender);
                raceOut.println(race);
                nameOut.close();
                stateOut.close();
                genderOut.close();
                raceOut.close();
                mainPage.show();
            }
        });

        contact.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent contactPressed) {
                //          contactPage.show();
            }
        });

        stats.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent statsPressed) {

                SimpleReader nameIn = new SimpleReader1L("data/name.txt");
                String statsName = nameIn.nextLine();
                statsLabel.setText(statsName + "'s Stats");
                statsGPA.setText(Double.toString(getGPA()));
                nameIn.close();

                statsPage.show();
            }
        });

        settings.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent settingsPressed) {
                //         settingsPage.show();
            }
        });

        back.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent backPressed) {
                mainPage.show();
            }
        });

    }

    public void stop() {
        this.current = Display.getInstance().getCurrent();
        if (this.current instanceof Dialog) {
            ((Dialog) this.current).dispose();
            this.current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }

}
