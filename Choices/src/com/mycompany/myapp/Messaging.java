package com.mycompany.myapp;

import java.util.Arrays;

import com.codename1.components.InfiniteProgress;
import com.codename1.components.MultiButton;
import com.codename1.components.SpanLabel;
import com.codename1.io.Log;
import com.codename1.io.Preferences;
import com.codename1.io.Storage;
import com.codename1.ui.Button;
import com.codename1.ui.ButtonGroup;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.RadioButton;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.animations.MorphTransition;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.WeakHashMap;
import com.codename1.util.CaseInsensitiveOrder;

import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class Messaging {

    private Form current;
    private Resources theme;
    private String fullName;
    private String uniqueId;
    private String imageURL;
    private static EncodedImage userPlaceholder;
    private EncodedImage roundPlaceholder;
    private java.util.List<String> recentContacts;
    private Image mask;
    private Image roundedMeImage;
    private ContactData[] contacts;
    private final WeakHashMap<String, EncodedImage> roundedImagesOfFriends = new WeakHashMap<>();
    static UserData user;

    static final class ContactData {
        public String uniqueId;
        public String name;
        public String imageUrl;
    }

    static final class UserData {
        public String name;
        public ContactData[] contacts;
    }

    //count should start at 0
    public void replyForm(String name, int count, Container chatArea,
            Form chatForm) {
        Form replyForm = new Form("Replies", new BoxLayout(BoxLayout.Y_AXIS));

        SimpleReader optionA = new SimpleReader1L("data/characters/" + name
                + "/event" + count + "/replies/best/reply.txt");
        SimpleReader optionB = new SimpleReader1L("data/characters/" + name
                + "/event" + count + "/replies/good/reply.txt");
        SimpleReader optionC = new SimpleReader1L("data/characters/" + name
                + "/event" + count + "/replies/bad/reply.txt");
        SimpleReader optionD = new SimpleReader1L("data/characters/" + name
                + "/event" + count + "/replies/worst/reply.txt");

        count++;

        String stringA = optionA.nextLine();
        String stringB = optionB.nextLine();
        String stringC = optionC.nextLine();
        String stringD = optionD.nextLine();

        optionA.close();
        optionB.close();
        optionC.close();
        optionD.close();

        RadioButton rbA = new RadioButton(stringA);
        RadioButton rbB = new RadioButton(stringB);
        RadioButton rbC = new RadioButton(stringC);
        RadioButton rbD = new RadioButton(stringD);
        rbA.setSelected(false);
        rbB.setSelected(false);
        rbC.setSelected(false);
        rbD.setSelected(false);
        ButtonGroup replyOptions = new ButtonGroup(rbA, rbB, rbC, rbD);

        Button rSubmit = new Button("Submit");

        replyForm.add(rbA);
        replyForm.add(rbB);
        replyForm.add(rbC);
        replyForm.add(rbD);
        replyForm.add(rSubmit);

        replyForm.show();

        //add name of form of messanger app
        rSubmit.addActionListener(e -> chatForm.show());
        SimpleWriter gp = new SimpleWriter1L("data/gpa.txt");
        if (rbA.isSelected()) {
            gp.println(1.0);
            this.sayNoLayout(chatArea, stringA);
        } else if (rbB.isSelected()) {
            gp.println(3.0);
            this.sayNoLayout(chatArea, stringB);
        } else if (rbC.isSelected()) {
            gp.println(2.0);
            this.sayNoLayout(chatArea, stringC);
        } else {
            gp.println(1.0);
            this.sayNoLayout(chatArea, stringD);
        }
        gp.close();
        SimpleWriter countOut = new SimpleWriter1L("data/intro/placement.txt");
        countOut.println(count);
        countOut.close();
    }

    static final class Message {
        private long time;
        private String senderId;
        private String recepientId;
        private String picture;
        private String name;
        private String message;
    }

    public void init(Object context) {
        this.theme = UIManager.initFirstTheme("/theme");

        Style iconFontStyle = UIManager.getInstance()
                .getComponentStyle("LargeIconFont");
        FontImage fnt = FontImage.create(" \ue80f ", iconFontStyle);
        userPlaceholder = fnt.toEncodedImage();
        this.mask = this.theme.getImage("rounded-mask.png");
        this.roundPlaceholder = EncodedImage.createFromImage(userPlaceholder
                .scaled(this.mask.getWidth(), this.mask.getHeight())
                .applyMask(this.mask.createMask()), false);
        this.fullName = "John Morales";
        this.uniqueId = Preferences.get("uniqueId", null);
        this.imageURL = "http://pepe-the-frog.com/_nw/3/91281965.png";

        if (Storage.getInstance().exists("recentContacts")) {
            this.recentContacts = (java.util.List<String>) Storage.getInstance()
                    .readObject("recentContacts");
        }

        Display.getInstance().addEdtErrorHandler((evt) -> {
            evt.consume();
            Log.p("Exception in AppName version " + Display.getInstance()
                    .getProperty("AppVersion", "Unknown"));
            Log.p("OS " + Display.getInstance().getPlatformName());
            Log.p("Error " + evt.getSource());
            Log.p("Current Form "
                    + Display.getInstance().getCurrent().getName());
            Log.e((Throwable) evt.getSource());
            Log.sendLog();
        });
    }

    private EncodedImage getRoundedFriendImage(String uid, String imageUrl) {
        EncodedImage roundedHimOrHerImage = this.roundedImagesOfFriends
                .get(uid);
        if (roundedHimOrHerImage == null) {
            roundedHimOrHerImage = URLImage.createToStorage(
                    this.roundPlaceholder, "rounded" + uid, imageUrl,
                    URLImage.createMaskAdapter(this.mask));
            this.roundedImagesOfFriends.put(uid, roundedHimOrHerImage);
        }
        return roundedHimOrHerImage;
    }

    private Component createTitleComponent(Form parent) {
        // we want the toolbar to be completely transparent, since we created it on the layered pane (using the true
        // argument in the constructor) it will flow in the UI
        parent.getToolbar().setUIID("Container");

        // we create 3 layers within the title, the region contains all the layers, the encspsulate includes the "me image"
        // which we want to protrude under the title area layer
        Container titleRegion = new Container(new LayeredLayout());
        Container titleEncapsulate = new Container(new BorderLayout());
        Container titleArea = new Container(new BorderLayout());

        // since the Toolbar is now transparent we assign the title area UIID to one of the layers within and the look
        // is preserved, we make it translucent though so we can see what's underneath
        titleArea.setUIID("TitleArea");
        titleArea.getUnselectedStyle().setBgTransparency(128);

        // We customize the title completely using a component, the "title" is just a label with the Title UIID
        Label title = new Label(parent.getTitle());
        title.setUIID("Title");
        titleArea.addComponent(BorderLayout.CENTER, title);

        // we package everything in a container so we can replace the title area with a search button as needed
        Container cnt = new Container(new BoxLayout(BoxLayout.X_AXIS));
        titleArea.addComponent(BorderLayout.EAST, cnt);

        // this is the Me picture that protrudes downwards. We use a placeholder which is then replace by the URLImage
        // with the actual image. Notice that createMaskAdapter allows us to not just scale the image but also apply
        // a mask to it...
//        Label me = new Label(
//                URLImage.createToStorage(this.roundPlaceholder, "userImage",
//                        this.imageURL, URLImage.createMaskAdapter(this.mask)));
//        me.setUIID("UserImage");

        // the search icon and the "me" image are on two separate layers so we use a "dummy" component that we
        // place in the search container to space it to the side and leave room for the "me" image
//        Label spacer = new Label(" ");
//        Container.setSameWidth(spacer, me);
//        cnt.addComponent(spacer);

        Container iconLayer = new Container(new BorderLayout());
        titleEncapsulate.addComponent(BorderLayout.NORTH, titleArea);

        titleRegion.addComponent(titleEncapsulate);
        titleRegion.addComponent(iconLayer);
//        iconLayer.addComponent(BorderLayout.EAST, me);

        return titleRegion;
    }

    void showContactsForm(UserData data) {
        Form contactsForm = new Form("Contacts");
        contactsForm.setLayout(new BoxLayout(BoxLayout.Y_AXIS));

        // the toolbar is created into a layer on the content pane. This allows us to render behind it and leave it semi transparent
        Toolbar tb = new Toolbar(true);

        // we want the title area to be transparent so it won't get in the way
        contactsForm.getTitleArea().setUIID("Container");

        // folds the toolbar automatically as we scroll down, shows it if we scroll back up
        tb.setScrollOffUponContentPane(true);
        contactsForm.setToolBar(tb);

        // we want the image behind the toolbar to stretch and fit the entire screen and leave no margin
        Label titleLabel = new Label(" ");
        Style titleLabelStyle = titleLabel.getUnselectedStyle();
        //titleLabelStyle.setBgImage(
        //this.theme.getImage("social-chat-tutorial-image-top.jpg"));
        titleLabelStyle.setBackgroundType(Style.BACKGROUND_IMAGE_SCALED_FILL);
        titleLabelStyle.setPadding(tb.getPreferredH(), tb.getPreferredH(),
                tb.getPreferredH(), tb.getPreferredH());
        titleLabelStyle.setPaddingUnit(Style.UNIT_TYPE_PIXELS,
                Style.UNIT_TYPE_PIXELS, Style.UNIT_TYPE_PIXELS,
                Style.UNIT_TYPE_PIXELS);
        titleLabelStyle.setMargin(0, 0, 0, 0);
        System.out.println("HI!HI!HI!HI!");
        contactsForm.addComponent(titleLabel);

        // the behavior of the title is rather complex so we extract it to a separate method
        tb.setTitleComponent(this.createTitleComponent(contactsForm));

        InfiniteProgress ip = new InfiniteProgress();
        contactsForm.addComponent(ip);

        this.loadContacts(data, ip, contactsForm.getContentPane());

        // creates the morph and other animations from the main form to the second form of the app
        this.createMorphEffect(titleLabel);

        contactsForm.show();
    }

    private ContactData getContactById(String id) {
        for (ContactData d : this.contacts) {
            if (d.uniqueId.equals(id)) {
                return d;
            }
        }
        return null;
    }

    private MultiButton createContactComponent(ContactData d) {
        MultiButton mb = new MultiButton();
        mb.putClientProperty("uid", d.uniqueId);
        mb.setTextLine1(d.name);
        if (d.imageUrl == null) {
            mb.setIcon(URLImage.createToStorage(userPlaceholder,
                    "data/characters/", d.imageUrl,
                    URLImage.RESIZE_SCALE_TO_FILL));
        } else {
            mb.setIcon(userPlaceholder);
        }
        mb.addActionListener((e) -> {
            this.showChatForm(d, mb);
        });
        return mb;
    }

    private ContactData[] readContactsToUser() {

        SimpleReader in = new SimpleReader1L(
                "data/characters/characterlist.txt");
        ContactData[] tempContacts = new ContactData[5];

        int i = 0;

        while (!in.atEOS()) {
            ContactData temp = new ContactData();
            temp.name = in.nextLine();
            temp.uniqueId = in.nextLine();
            temp.imageUrl = in.nextLine();
            System.out.println(temp.imageUrl);
            in.nextLine();
            tempContacts[i] = temp;
            i++;
        }

        return tempContacts;
    }

    private void loadContacts(UserData data, InfiniteProgress ip,
            Container contactsContainer) {
        // we sort the contacts by name which is pretty concise code thanks to Java 8 lambdas
        Display.getInstance().scheduleBackgroundTask(() -> {
            this.contacts = this.readContactsToUser();
            CaseInsensitiveOrder co = new CaseInsensitiveOrder();
            Arrays.sort(this.contacts, (ContactData o1, ContactData o2) -> {
                return co.compare(o1.name, o2.name);
            });

            Display.getInstance().callSerially(() -> {
                if (this.recentContacts != null
                        && this.recentContacts.size() > 0) {
                    Label recentHeader = new Label("Recent");
                    recentHeader.setUIID("ContactsHeader");
                    contactsContainer.addComponent(recentHeader);

                    for (String cont : this.recentContacts) {
                        ContactData d = this.getContactById(cont);
                        contactsContainer
                                .addComponent(this.createContactComponent(d));
                    }

                    Label allHeader = new Label("All Contacts");
                    allHeader.setUIID("ContactsHeader");
                    contactsContainer.addComponent(allHeader);
                }

                contactsContainer.removeComponent(ip);

                for (ContactData d : this.contacts) {
                    contactsContainer
                            .addComponent(this.createContactComponent(d));
                }
                contactsContainer.revalidate();
            });
        });
    }

    private void createMorphEffect(Label titleLabel) {
        // animate the components out of the previous form if we are coming in from the login form
        Form parent = Display.getInstance().getCurrent();
        if (parent.getUIID().equals("MainForm")) {
            for (Component cmp : parent.getContentPane()) {
                cmp.setX(parent.getWidth());
            }

            // moves all the components outside of the content pane to the right while fading them out over 400ms
            parent.getContentPane().animateUnlayoutAndWait(400, 0);
            parent.getContentPane().removeAll();

            // we can't mutate a form into a component in another form so we need to convert the background to an image and then morph that
            // this is especially easy since we already removed all the components
            Label dummy = new Label();
            dummy.setShowEvenIfBlank(true);
            dummy.setUIID("Container");
            dummy.setUnselectedStyle(new Style(parent.getUnselectedStyle()));
            parent.setUIID("Form");

            // special case to remove status bar on iOS 7
            parent.getTitleArea().removeAll();
            parent.setLayout(new BorderLayout());
            parent.addComponent(BorderLayout.CENTER, dummy);
            parent.revalidate();

            // animate the main panel to the new location at the top title area of the screen
            dummy.setName("fullScreen");
            titleLabel.setName("titleImage");
            parent.setTransitionOutAnimator(MorphTransition.create(1100)
                    .morph("fullScreen", "titleImage"));
        }
    }

    private void respond(Container chatArea, String text,
            Image roundedHimOrHerImage) {
        Component answer = this.respondNoLayout(chatArea, text,
                roundedHimOrHerImage);
        answer.setX(chatArea.getWidth());
        answer.setWidth(chatArea.getWidth());
        answer.setHeight(40);
        chatArea.animateLayoutAndWait(300);
        chatArea.scrollComponentToVisible(answer);
    }

    void showChatForm(ContactData d, Component source) {
        Form chatForm = new Form(d.name);
        Button reply = new Button("Reply");
        // this identifies the person we are chatting with, so an incoming message will know if this is the right person...
        chatForm.putClientProperty("cid", d.uniqueId);
        chatForm.setLayout(new BorderLayout());
        Toolbar tb = new Toolbar();
        chatForm.addComponent(BorderLayout.SOUTH,
                LayeredLayout.encloseIn(BoxLayout.encloseY(reply)));
        final Container chatArea = new Container(
                new BoxLayout(BoxLayout.Y_AXIS));
        chatArea.setScrollableY(true);
        chatArea.setName("ChatArea");
        chatForm.setToolBar(tb);

        chatForm.setBackCommand(new Command("Contacts") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                source.getComponentForm().showBack();
            }
        });

//        // Gets a rounded version of our friends picture and caches it
//        Image roundedHimOrHerImage = this.getRoundedFriendImage(d.uniqueId,
//                d.imageUrl);

        //TableLayout t2;
        //t2 = new TableLayout(4, 1);
        //t2.setGrowHorizontally(true);
        //chatForm.setLayout(t2);
        //TableLayout.Constraint mainPageConstraint = t2.createConstraint();
        //mainPageConstraint.setHeightPercentage(1);
        //chatForm.add(mainPageConstraint, reply);

        // to place the image on the right side of the toolbar we just use a command that does nothing...
        Command himOrHerCommand = new Command("", null);
        tb.addCommandToRightBar(himOrHerCommand);

        SimpleReader countIn = new SimpleReader1L("data/intro/placement.txt");
        int count = countIn.nextInteger();
        SimpleReader readMessage = new SimpleReader1L("data/characters/"
                + d.name.toLowerCase() + "/event" + count + "/prompt.txt");
        String prompt = readMessage.nextLine();
        this.sayNoLayout(chatArea, prompt);

        countIn.close();
//        // we type the message to the chat partner in the text field on the south side
//        TextField write = new TextField(30);
//        write.setHint("Write to " + d.name);
        chatForm.addComponent(BorderLayout.CENTER, chatArea);
//        chatForm.addComponent(BorderLayout.SOUTH, write);
//
//        // the action listener for the text field creates a message object, converts it to JSON and publishes it to the listener queue
//        write.addActionListener((e) -> {
//            String text = write.getText();
//            final Component t = this.say(chatArea, text);
//
//            // we make outgoing messages translucent to indicate that they weren't received yet
//            t.getUnselectedStyle().setOpacity(120);
//            write.setText("");
//
//        });

        reply.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent replyPressed) {
                SimpleReader countIn = new SimpleReader1L(
                        "data/intro/placement.txt");
                int count = countIn.nextInteger();
                SimpleReader readMessage = new SimpleReader1L(
                        "data/characters/" + d.name.toLowerCase() + "/event"
                                + count + "/prompt.txt");
                String prompt = readMessage.nextLine();
                System.out.println(prompt);
                Messaging.this.sayNoLayout(chatArea, prompt);

                Messaging.this.replyForm(d.name.toLowerCase(), count, chatArea,
                        chatForm);
                countIn.close();
            }
        });

        chatForm.show();

    }

    private Component say(Container chatArea, String text) {
        Component t = this.sayNoLayout(chatArea, text);
        t.setY(chatArea.getHeight());
        t.setWidth(chatArea.getWidth());
        t.setHeight(40);
        chatArea.animateLayoutAndWait(300);
        chatArea.scrollComponentToVisible(t);
        return t;
    }

    private Component respondNoLayout(Container chatArea, String text,
            Image roundedHimOrHerImage) {
        SpanLabel answer = new SpanLabel(text);
        answer.setIcon(roundedHimOrHerImage);
        answer.setIconPosition(BorderLayout.EAST);
        answer.setTextUIID("BubbleThem");
        answer.setTextBlockAlign(Component.RIGHT);
        chatArea.addComponent(answer);
        return answer;
    }

    private Component sayNoLayout(Container chatArea, String text) {
        SpanLabel t = new SpanLabel(text);
        t.setIcon(this.roundedMeImage);
        t.setTextBlockAlign(Component.LEFT);
        t.setTextUIID("BubbleMe");
        chatArea.addComponent(t);
        return t;
    }

    public void start() {
        if (this.current != null) {
            this.current.show();
            return;
        }
        ContactData cd = new ContactData();
        cd.name = "Lil' Nickie";
        cd.uniqueId = "01";
        cd.imageUrl = "http://freethoughtblogs.com/pharyngula/files/2016/06/pepe.png";
        this.showChatForm(cd, Display.getInstance().getCurrent());
    }

    public void stop() {
        this.current = Display.getInstance().getCurrent();
        if (this.current instanceof Dialog) {
            ((Dialog) this.current).dispose();
            this.current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }

}